version: '3.7'

volumes:
  kazarma_deps:
  kazarma_node_deps:
  kazarma_build_files:
  postgres_kazarma_files:
  postgres_commonspub_files:
  postgres_pleroma_files:
  postgres_synapse_files:
  synapse_files:
  pleroma_uploads:

services:
  
  kazarma:
    build: .
    hostname: kazarma.kazarma.local
    # ports:
    #   - "4000:4000"
    volumes:
      - ./:/opt/app:rw
      - kazarma_deps:/opt/app/deps
      - kazarma_node_deps:/opt/app/assets/node_modules
      - kazarma_build_files:/opt/app/_build
    depends_on:
      - postgres_kazarma
    labels:
      - traefik.enable=false
    environment:
      - POSTGRES_HOST=postgres_kazarma
      - POSTGRES_USER=kazarma
      - POSTGRES_DB=kazarma
      - POSTGRES_PASSWORD=postgres
    networks:
      default:
        aliases:
          - kazarma.kazarma.local

  synapse:
    image: docker.io/matrixdotorg/synapse:v1.12.4-py3
    hostname: synapse.kazarma.local
    # domainname: matrix.local
    # Since synapse does not retry to connect to the database, restart upon
    # failure
    restart: unless-stopped
    # Need to do it via YAML
    labels:
      - traefik.enable=false
      # - traefik.http.services.synapse.loadbalancer.server.port=8008
      # - traefik.http.routers.synapse.entrypoints=synapse
      # - traefik.http.routers.synapse.rule=Host(`matrix.kazarma.local`)
    environment:
      - SYNAPSE_SERVER_NAME=kazarma.local
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_ENABLE_REGISTRATION=yes
      - SYNAPSE_LOG_LEVEL=INFO
      # - SYNAPSE_LOG_LEVEL=DEBUG
      # - POSTGRES_HOST=postgres_synapse
      # - POSTGRES_USER=synapse
      # - POSTGRES_PASSWORD=postgres
    volumes:
      - synapse_files:/data
      - ./infra/dev/synapse-homeserver.yaml:/data/homeserver.yaml
      - ./infra/dev/synapse-kazarma.yaml:/data/appservices/kazarma.yaml
      - ./infra/dev/synapse-log.config:/data/log.config
    # depends_on:
    #   - postgres_synapse
    # ports:
    #   - 8008:8008/tcp
    networks:
      default:
        aliases:
          - synapse.kazarma.local

  delegation:
    image: nginx:1.19
    hostname: kazarma.local
    volumes:
      - ./infra/dev/delegation-matrix:/usr/share/nginx/html/.well-known/matrix:ro
      - ./infra/dev/host-meta:/usr/share/nginx/html/.well-known/host-meta:ro
    labels:
      - traefik.enable=false
      # - traefik.http.routers.delegation.entryPoints=http
      # - traefik.http.routers.delegation.rule=Host(`kazarma.local`) && PathPrefix(`/.well-known/matrix`)
      # - traefik.http.routers.delegation.middlewares=https_redirect
      # - traefik.http.routers.delegation.middlewares=delegation-strip
    networks:
      default:
        aliases:
          - kazarma.local

  element:
    image: vectorim/riot-web
    hostname: element.local
    labels:
      - traefik.enable=false
    volumes:
      - ./infra/dev/element-config.json:/app/config.json

  pleroma:
    environment:
    - DOMAIN=pleroma.local
    - DB_HOST=postgres_pleroma
    - DB_PASS=postgres
    image: epenguincom/pleroma:2.0.2-alpine
    # build: ../pleroma/
    init: true
    labels:
      - traefik.enable=true
      - traefik.http.services.pleroma.loadbalancer.server.port=4000
      - traefik.http.routers.pleroma.entrypoints=http
      - traefik.http.routers.pleroma.rule=Host(`pleroma.local`)
    restart: unless-stopped
    depends_on:
      - postgres_pleroma
    # ports: ['5000:4000']
    volumes:
        # - ./pleroma_config.exs:/pleroma/config/prod.secret.exs
        - pleroma_uploads:/pleroma/uploads
        - ./infra/dev/pleroma-docker-config.exs:/var/lib/pleroma/config.exs
      # - ./pleroma/custom.d:/custom.d:ro
      # - ./pleroma/config/dev.secret.exs:/home/pleroma/pleroma/config/prod.secret.exs:ro
      # - ./pleroma/config/dev.secret.exs:/home/pleroma/pleroma/config/dev.secret.exs:ro
      # - ./pleroma/uploads:/uploads
      # - ./pleroma/_build:/_build

  pleroma_reverse:
    image: traefik:v2.2.0
    # command: --web --docker --docker.domain=local --logLevel=DEBUG
    command:
      - --entrypoints.http.address=:80
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --api.insecure
    hostname: pleroma.local
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - /dev/null:/traefik.toml
    networks:
      default:
        aliases:
          - pleroma.local


  postgres_kazarma:
    image: postgres:12-alpine
    domainname: postgres_kazarma
    labels:
      - traefik.enable=false
    environment:
      - POSTGRES_USER=kazarma
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_kazarma_files:/var/lib/postgresql/data

  postgres_pleroma:
    image: postgres:12-alpine
    domainname: postgres_pleroma
    labels:
      - traefik.enable=false
    # init: true
    # restart: unless-stopped
    environment:
      - POSTGRES_USER=pleroma
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_pleroma_files:/var/lib/postgresql/data
      # - ./pleroma/initdb.sql:/docker-entrypoint-initdb.d/pleroma.sql

  # postgres_synapse:
  #   # image: docker.io/postgres:10-alpine
  #   image: postgres:12-alpine
  #   domainname: postgres_synapse
  #   labels:
  #     - traefik.enable=false
  #   environment:
  #     - POSTGRES_USER=synapse
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
  #   volumes:
  #     - postgres_synapse_files:/var/lib/postgresql/data
