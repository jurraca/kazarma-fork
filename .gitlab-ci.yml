stages:
  - setup
  - deploy_staging
  - analysis
  - deploy_production
  - docs

image: bitwalker/alpine-elixir:1.11

cache: &global_cache
  key: cache-test
  when: always
  policy: pull
  paths:
    - _build
    - deps

variables:
  MIX_ENV: test
  GIT_SUBMODULE_STRATEGY: recursive

### setup

prepare_test:
  stage: setup
  script:
    - mix deps.get
    - mix compile
  cache:
    <<: *global_cache
    policy: pull-push

prepare_dev:
  stage: setup
  only:
    - master
  variables:
    MIX_ENV: dev
  script:
    - mix deps.get
    - mix compile
  cache:
    <<: *global_cache
    policy: pull-push
    key: cache-dev

build_docker_image:
  stage: setup
  image: docker:19.03.1
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/production:$CI_COMMIT_SHA
  services:
    - docker:19.03.1-dind
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/production:latest || true
    - >
      docker build
      -f Dockerfile.prod
      --pull
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $IMAGE_TAG
      .
    - docker push $IMAGE_TAG

tag_latest_docker_image:
  stage: setup
  needs:
    - build_docker_image
  only:
    refs:
      - master
  variables:
    GIT_STRATEGY: none
    IMAGE_TAG: $CI_REGISTRY_IMAGE/prod:$CI_COMMIT_SHA
    IMAGE_NEW_TAG: $CI_REGISTRY_IMAGE/prod:latest
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $IMAGE_NEW_TAG
    - docker push $IMAGE_NEW_TAG

Tag tagged prod image:
  stage: setup
  needs:
    - build_docker_image
  only:
    refs:
      - tags
  variables:
    GIT_STRATEGY: none
    IMAGE_TAG: $CI_REGISTRY_IMAGE/prod:$CI_COMMIT_SHA
    IMAGE_NEW_TAG: $CI_REGISTRY_IMAGE/prod:CI_COMMIT_REF_NAME
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $IMAGE_NEW_TAG
    - docker push $IMAGE_NEW_TAG

test:
  stage: analysis
  needs:
    - prepare_test
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: kazarma_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
    MIX_ENV: test
  before_script:
    - mix ecto.create
    - mix ecto.migrate
  script:
    - mix test --cover
  artifacts:
    when: always
    paths:
      - cover
    reports:
      junit: _build/test/lib/kazarma/test-junit-report.xml
      cobertura: coverage.xml

format:
  stage: analysis
  needs:
    - prepare_test
  script:
    - mix format --check-formatted

credo:
  stage: analysis
  needs:
    - prepare_test
  script:
    - mix credo suggest --only readability | tee credo.log
  artifacts:
    when: always
    paths:
      - "credo.log"

dialyzer:
  stage: analysis
  needs:
    - prepare_test
  script:
    - mix dialyzer
  cache: 
    <<: *global_cache
    policy: pull-push
    paths:
      - _build
      - deps
      - priv/plts

### docs

pages:
  stage: docs
  only:
    - master
  needs:
    - prepare_dev
  variables:
    MIX_ENV: dev
  script:
    - mix docs -o public
  cache:
    <<: *global_cache
    key: cache-dev
  artifacts:
    paths:
      - public
